import fs from 'fs/promises';

import ImgLoaderOptions from '../types/ImgLoaderOptions';
import deriveExportOptions from './deriveExportOptions';
import getDefaultQuality from './getDefaultQuality';


const base = `
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT.
// TO UPDATE, SET THE generateDeclarations OPTION OF bismuth-img-loader TO true
// AND RUN WEBPACK ONCE IN DEVELOPMENT MODE.


type _BismuthImage = {
	src: string;
	prefix: string;
	width: number;
	height: number;
};

type _WithWebp = {
	webp: string;
};

type _WithBasis = {
	basis: string;
};

type _WithThumbnail = {
	thumbnail: {
		data: string;
		width: number;
		height: number;
	};
};

type BismuthImage =
	_BismuthImage
	& Partial<_WithWebp>
	& Partial<_WithBasis>
	& Partial<_WithThumbnail>;

`;


const exts = [
	'*.jpg',
	'*.jpeg',
	'*.png',
];


function declaration({
	options,
	ext,
	mode = '',
	quality = '',
}: {
	options: ImgLoaderOptions;
	ext: string;
	mode?: string;
	quality?: string;
}) {
	const exportOptions = deriveExportOptions({
		options,
		mode: mode || 'default',
		quality: quality || getDefaultQuality( options, mode || 'default' ),
	});

	const types: string[] = ['_BismuthImage'];

	if ( exportOptions.emitWebp ) types.push( '_WithWebp' );
	if ( exportOptions.emitBasis ) types.push( '_WithBasis' );
	if ( exportOptions.thumbnail ) types.push( '_WithThumbnail' );

	const params = [];
	if ( mode ) params.push( `mode=${mode}` );
	if ( quality ) params.push( `quality=${quality}` );


	return `
declare module '${ext}${params.length > 0 ? `?${params.join( '&' )}` : ''}' {
	const e: ${types.join( ' & ' )};
	export default e;
}
`;
}


export default function generateDeclarations( options: ImgLoaderOptions ): void {
	const modes = Object.keys( options.modes );
	const qualityLevels = Object.keys( options.qualityLevels );

	let output = `${base}`;

	exts.forEach( ext => {
		output += declaration({
			options,
			ext,
		});

		qualityLevels.forEach( quality => {
			output += declaration({
				options,
				ext,
				quality,
			});
		});

		modes.forEach( mode => {
			output += declaration({
				options,
				ext,
				mode,
			});

			qualityLevels.forEach( quality => {
				output += declaration({
					options,
					ext,
					mode,
					quality,
				});
			});
		});
	});

	fs.writeFile( 'img-imports.d.ts', output );
}
